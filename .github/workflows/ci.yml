name: ci
on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  codespell:
    name: Codespell
    runs-on: ubuntu-22.04
    steps:
      - name: Setup | Checkout rpm-sequoia
        uses: actions/checkout@v4
      - name: Setup | Dependencies
        run: sudo apt update && sudo apt install codespell
      - name: Codespell
        run: codespell --version && codespell --config .codespellrc --summary

  compile:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout rpm-sequoia
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup | Build Cache rpm-sequoia
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Dependencies rpm-sequoia
        run: sudo apt update && sudo apt install cargo clang git nettle-dev pkg-config libssl-dev

      - name: Build | Compile rpm-sequoia
        run: cargo build

      - name: Build | Test rpm-sequoia
        run: cargo test

      - name: Build | Doc rpm-sequoia
        run: cargo doc --no-deps

  all_commits:
    name: All Commits
    runs-on: ubuntu-latest
    needs: ["Compile"]
    steps:
      - name: Setup | Checkout rpm-sequoia
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup | Build Cache rpm-sequoia
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Dependencies rpm-sequoia
        run: sudo apt update && sudo apt install cargo clang git nettle-dev pkg-config libssl-dev

      - name: Build | Compile rpm-sequoia
        run: cargo build

      - name: Build | Test other commits
        run: .ci/all_commits.sh

  rpm:
    name: RPM
    runs-on: ubuntu-latest
    needs: ["Compile"]
    steps:
      - name: Setup | Checkout rpm-sequoia
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup | Build Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Dependencies rpm-sequoia
        run: sudo apt update && sudo apt install cargo clang git nettle-dev pkg-config libssl-dev

      - name: Build | Compile rpm-sequoia
        run: cargo build

      - name: Setup | rpm Dependencies
        run: |
          sudo apt install podman

      - name: Setup | Checkout rpm
        uses: actions/checkout@v4
        with:
          repository: pmatilai/rpm.git
          ref: v6salt
          fetch-depth: 1
          path: rpm

      - name: Test | rpm
        run: |
             export PKG_CONFIG_PATH=$(pwd)/target/debug
             if ! test -e $PKG_CONFIG_PATH/rpm-sequoia-uninstalled.pc
             then
                 echo "$PKG_CONFIG_PATH/rpm-sequoia-uninstalled.pc is missing.  Did you build librpm-sequoia?"
                 exit 1
             fi

             export LD_LIBRARY_PATH=$PKG_CONFIG_PATH
             if ! test -e $LD_LIBRARY_PATH/librpm_sequoia.so
             then
                 echo "$LD_LIBRARY_PATH/librpm_sequoia.so is missing.  Did you build librpm-sequoia?"
                 exit 1
             fi

             echo "::group::make check"
             cd rpm
             # enable new test in rpm testsuite and patch dockerfile
             patch -p1 < ../tests/rpm.patch
             RPM_ROOT=$(pwd)
             # copy the rpm-sequoia artifacts to rpm directory
             mkdir sequoia
             cp ../target/debug/librpm_sequoia.so* sequoia/
             cp ../target/debug/rpm-sequoia.pc sequoia/
             cd tests
             # based on ./mktree.oci build
             podman build --target full -t rpm-tests -f Dockerfile $RPM_ROOT
             # run the tests with new sequoia
             if ! podman run --privileged -it --rm --read-only --tmpfs /tmp -v $RPM_ROOT:/srv:z \
                --workdir /srv -e ROOTLESS=1 rpm-tests \
                rpmtests -k OpenPGP -k signature -k rpmkeys -k digest;
             then
                 echo "::endgroup::"

                 cd ..
                 for log in rpmtests.dir/*/rpmtests.log
                 do
                     echo "::group::$log"
                     cat $log || true
                     echo "::endgroup::"
                 done
                 exit 1
             else
                 echo "::endgroup::"
             fi
